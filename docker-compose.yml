# Intelligent Engineering Platform 2.0 - Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: iep-postgres
    environment:
      POSTGRES_DB: intelligent_engineering
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./packages/backend/src/database/migrations/001_initial_schema.sql:/docker-entrypoint-initdb.d/02-initial-data.sql
    networks:
      - iep-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: iep-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - iep-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
    container_name: iep-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: intelligent_engineering
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - iep-network
    volumes:
      - ./packages/backend/src:/app/src
      - ./packages/shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
    container_name: iep-frontend
    environment:
      VITE_BACKEND_URL: ${BACKEND_URL:-http://localhost:3001}
      VITE_GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - iep-network
    volumes:
      - ./packages/frontend/src:/app/src
      - ./packages/shared:/app/shared

  # NGINX Load Balancer (for production)
  nginx:
    image: nginx:alpine
    container_name: iep-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - iep-network
    profiles:
      - production

  # MinIO for file storage (alternative to AWS S3)
  minio:
    image: minio/minio:latest
    container_name: iep-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - iep-network
    command: server /data --console-address ":9001"
    profiles:
      - storage

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  iep-network:
    driver: bridge